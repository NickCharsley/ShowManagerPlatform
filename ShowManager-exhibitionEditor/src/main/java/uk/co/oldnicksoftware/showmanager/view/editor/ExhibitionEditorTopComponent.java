/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.co.oldnicksoftware.showmanager.view.editor;

import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.actions.AbstractSavable;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.UndoRedo;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.datatransfer.NewType;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.windows.WindowManager;
import uk.co.oldnicksoftware.showmanager.api.entities.DefaultsSingleton;
import uk.co.oldnicksoftware.showmanager.api.entities.ExhibitionCollection;
import uk.co.oldnicksoftware.showmanager.api.capabilities.SaveableEntityCapability;
import uk.co.oldnicksoftware.showmanager.domain.Exhibition;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//uk.co.oldnicksoftware.showmanager.view.editor//ExhibitionEditor//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ExhibitionEditorTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "uk.co.oldnicksoftware.showmanager.view.editor.ExhibitionEditorTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ExhibitionEditorAction",
        preferredID = "ExhibitionEditorTopComponent"
)
@Messages({
    "CTL_ExhibitionEditorAction=ExhibitionEditor",
    "CTL_ExhibitionEditorTopComponent=ExhibitionEditor Window",
    "HINT_ExhibitionEditorTopComponent=This is a ExhibitionEditor window"
})
public final class ExhibitionEditorTopComponent extends TopComponent implements LookupListener {
    private Lookup.Result<Node> exhibitionNodeResult;
    private Lookup.Result<Exhibition> exhibitionResult;
    private Lookup.Result<ExhibitionCollection> exhibitionQueryResult;
    private ExhibitionCollection query;
    private Exhibition exhibition;
    private Node exhibitionNode;

    private final UndoRedo.Manager manager = new UndoRedo.Manager();
    private final InstanceContent instanceContent;
    private String nameText;
    private boolean defaultBool;

    public ExhibitionEditorTopComponent() {
        initComponents();
        setName(Bundle.CTL_ExhibitionEditorTopComponent());
        setToolTipText(Bundle.HINT_ExhibitionEditorTopComponent());

        nameField.getDocument().addUndoableEditListener(manager);
        
        manager.addChangeListener(new ChangeListener(){@Override public void stateChanged(ChangeEvent e) {modify();}});
        defaultField.addChangeListener(new ChangeListener(){@Override public void stateChanged(ChangeEvent e) {modify();}});
        
        instanceContent=new InstanceContent();
        associateLookup(new AbstractLookup(instanceContent));    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        defaultField = new javax.swing.JCheckBox();
        nameField = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExhibitionEditorTopComponent.class, "ExhibitionEditorTopComponent.jLabel1.text")); // NOI18N

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, nameField, org.jdesktop.beansbinding.ObjectProperty.create(), jLabel1, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExhibitionEditorTopComponent.class, "ExhibitionEditorTopComponent.jLabel2.text")); // NOI18N

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, defaultField, org.jdesktop.beansbinding.ObjectProperty.create(), jLabel2, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        org.openide.awt.Mnemonics.setLocalizedText(defaultField, org.openide.util.NbBundle.getMessage(ExhibitionEditorTopComponent.class, "ExhibitionEditorTopComponent.defaultField.text")); // NOI18N

        nameField.setText(org.openide.util.NbBundle.getMessage(ExhibitionEditorTopComponent.class, "ExhibitionEditorTopComponent.nameField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(defaultField)
                        .addGap(0, 279, Short.MAX_VALUE))
                    .addComponent(nameField))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(defaultField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)))
                .addContainerGap(232, Short.MAX_VALUE))
        );

        bindingGroup.bind();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox defaultField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField nameField;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private Lookup context(){
        return WindowManager.getDefault().findTopComponent("ExhibitionListTopComponent").getLookup();
    }
    
    @Override
    public void componentOpened() {
        exhibitionNodeResult = context().lookupResult(Node.class);
        exhibitionResult = context().lookupResult(Exhibition.class);
        exhibitionQueryResult = context().lookupResult(ExhibitionCollection.class);
        
        exhibitionNodeResult.addLookupListener(this);
        exhibitionQueryResult.addLookupListener(this);
        exhibitionResult.addLookupListener(this);
        
        resultChanged(new LookupEvent(exhibitionResult));  
    }

    @Override
    public void componentClosed() {
        exhibitionNodeResult.removeLookupListener(this);
        exhibitionQueryResult.removeLookupListener(this);
        exhibitionResult.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent ev) {
        nameField.setText("[no name]");
        defaultField.setSelected(false);

        //Get the query:
        Collection allQueries = exhibitionQueryResult.allInstances();
        Iterator it1 = allQueries.iterator();
        while (it1.hasNext()) {
            query = (ExhibitionCollection)it1.next();
            setDisplayName("Exhibitions");
        }
        //Get the exhibition:
        Collection allExhibitions = exhibitionResult.allInstances();
        Iterator it2 = allExhibitions.iterator();
        while (it2.hasNext()) {
            exhibition = (Exhibition)it2.next();
            nameField.setText(exhibition.getName());
            defaultField.setSelected(exhibition.isDefault());
        }
        //Get the node:
        Collection allNodes = exhibitionNodeResult.allInstances();
        Iterator it3 = allNodes.iterator();
        while (it3.hasNext()) {
            exhibitionNode = (Node)it3.next();
        }
        //Need to Clear Save and Undo here
        nameText=nameField.getText();
        defaultBool=defaultField.isSelected();
        //Remove New Type?
        Lookup.Result<NewType> newTypeResult= getLookup().lookupResult(NewType.class);
        Collection allNewTypes = newTypeResult.allInstances();
        Iterator it4 = allNewTypes.iterator();
        while (it4.hasNext()){
            instanceContent.remove(it4.next());
        }        
       
        if (exhibitionNode!=null){
            this.setActivatedNodes(new Node[]{exhibitionNode});
            for (NewType nt :exhibitionNode.getNewTypes()){
                instanceContent.add(nt);
            }
        }
        manager.discardAllEdits();
        modify();
    }
    
    private void modify(){
        if (defaultField.isSelected()==defaultBool
            && nameField.getText().equals(nameText)){
            SavableViewCapability svc=getLookup().lookup(SavableViewCapability.class);
            if (svc != null) {
                svc.remove();
            }
        } else {
            if (getLookup().lookup(SavableViewCapability.class) == null) {
                instanceContent.add(new SavableViewCapability());
            }
        }
    }    
    
   //private static final Icon ICON = ImageUtilities.loadImageIcon("org/shop/editor/Icon.png", true);
    
    private class SavableViewCapability extends AbstractSavable {// implements Icon {
        
        SavableViewCapability(){
            register();
        }
                
        @Override
        protected String findDisplayName(){
            String name=nameField.getText();
            return "Exhibition: "+name;
        }
        
        ExhibitionEditorTopComponent tc() {
            return ExhibitionEditorTopComponent.this;
        }        
        
        @Override
        public void handleSave() throws IOException {
            SaveableEntityCapability saveable = query.getLookup().lookup(SaveableEntityCapability.class);
            //Update exhibition to have changes
            exhibition.setName(nameField.getText());
            if (!saveable.isSavable(exhibition)){
                //Reset exhibition
                exhibition.setName(nameText);                
                NotifyDescriptor.Message message = new NotifyDescriptor.Message("Exhibition Already Exists. It cannot be saved",
                    NotifyDescriptor.WARNING_MESSAGE);
                DialogDisplayer.getDefault().notify(message);
            }   
            else 
            {
                NotifyDescriptor.Confirmation message = new NotifyDescriptor.Confirmation("Do you want to save \""
                    + nameField.getText() +"\"?",
                    NotifyDescriptor.OK_CANCEL_OPTION,
                    NotifyDescriptor.QUESTION_MESSAGE);
                Object result = DialogDisplayer.getDefault().notify(message);
                if (NotifyDescriptor.YES_OPTION.equals(result)) {            
                    try {
                    //Only do this just before save, it's not easily reversable!!!
                    Lookup defaultLookup = Lookup.getDefault();
                    DefaultsSingleton defaultsSingleton = defaultLookup.lookup(DefaultsSingleton.class);
                    if (defaultField.isSelected()){
                        //Make default
                        if (defaultsSingleton!=null) {
                            exhibition.link(defaultsSingleton.getDefaults());
                        }
                    } else if (exhibition.isDefault()){
                        //Clear default
                        exhibition.unlink(defaultsSingleton.getDefaults());
                    }
                    saveable.save(exhibition);
                    } catch (Exception ex) {
                        Exceptions.printStackTrace(ex);
                    }
                    query.reload();

                    nameText=nameField.getText();
                    defaultBool=defaultField.isSelected();
                }
            }
            remove();
        }
        
        public void remove(){
            tc().instanceContent.remove(this);
            unregister();
        }
        
        @Override
        public boolean equals(Object obj) {
            if (obj instanceof SavableViewCapability) {
                SavableViewCapability m = (SavableViewCapability) obj;
                return tc() == m.tc();
            }
            return false;
        }

        @Override
        public int hashCode() {
            return tc().hashCode();
        }
/*
        @Override
        public void paintIcon(Component c, Graphics g, int x, int y) {
            ICON.paintIcon(c, g, x, y);
        }

        @Override
        public int getIconWidth() {
            return ICON.getIconWidth();
        }

        @Override
        public int getIconHeight() {
            return ICON.getIconHeight();
        }
*/    }
}
